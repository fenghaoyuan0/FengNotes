# 基础（中）
## 面向对象和面向过程的区别
两者的区别在于解决问题的方式不同
* 面向过程会把解决问题的过程拆成一个个方法,通过一个个方法的执行解决问题
* 面向对象会先抽象成对象,通过对象去执行方法解决问题

面向对象更易维护,易复用, 易拓展.

## 引用
```java
Demo demo = new Demo()
```
这一条语句，其实包括了四个动作：<br>
1）右边的“new Demo”，是以Demo类为模板，在堆空间里创建一个Demo对象。<br>
2）末尾的()意味着，在对象创建后，立即调用Demo类的构造函数，对刚生成的对象进行初始化。<br>
3）左边的“Demo demo”创建了一个Demo类引用变量，它存放在栈空间中。也就是用来指向Demo对象的对象引用。<br>
4）“=”操作符使对象引用指向刚创建的那个Demo对象。<br>
参考:
[对象与对象引用](https://blog.csdn.net/yk80695816/article/details/105352796)
* 对象的相等一般比较的是内存中存放的内容是否相等。
* 引用相等一般比较的是他们指向的内存地址是否相等。

## 类的构造方法的作用是什么?
完成对象的初始化工作

## 如果一个类没有声明构造方法,该程序能正确执行吗?
可以!如果不声明构造方法,也会有默认的不带参数的构造方法;<br>
如果我们重载了有参的构造方法，记得都要把无参的构造方法也写出来（无论是否用到），因为这可以帮助我们在创建对象的时候少踩坑。

## 构造方法的特点
1. 方法名与类名相同
2. 没有返回值,不能用void声明
3. 生成类的对象时自动执行,无需调用
4. 不能被重写,可以被重载

## 面向对象的三大特征
**封装:** 封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。就好像如果没有空调遥控器，那么我们就无法操控空凋制冷，空调本身就没有意义了（当然现在还有很多其他方法 ，这里只是为了举例子）。
```java
public class Student {

    private int id;//id属性私有化
    private String name;//name属性私有化

    //获取id的方法
    public int getId() {
        return id;
    }

    //设置id的方法
    public void setId(int id) {
        this.id = id;
    }

    //获取name的方法
    public String getName() {
        return name;
    }

    //设置name的方法
    public void setName(String name) {
        this.name = name;
    }
}
```
**继承:** 继承不同类型的对象，相互之间经常有一定数量的共同点。例如，小明同学、小红同学、小李同学，都共享学生的特性（班级、学号等）。同时，每一个对象还定义了额外的特性使得他们与众不同。例如小明的数学比较好，小红的性格惹人喜爱；小李的力气比较大。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。关于继承如下 3 点请记住：子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。子类可以拥有自己属性和方法，即子类可以对父类进行扩展。子类可以用自己的方式实现父类的方法。（以后介绍）。<br>
**多态:** 多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。多态的特点:对象类型和引用类型之间具有继承（类）/实现（接口）的关系；引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；多态不能调用“只在子类存在但在父类不存在”的方法；如果子类重写了父类的方法，真正执行的是子类覆盖的方法，如果子类没有覆盖父类的方法，执行的是父类的方法。
## 接口和抽象类有什么共同点和区别？
* 共同点 ：都不能被实例化。都可以包含抽象方法。都可以有默认实现的方法（Java 8 可以用 default 关键字在接口中定义默认方法）。
* 区别 ：接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系。一个类只能继承一个类，但是可以实现多个接口。接口中的成员变量只能是 public static final 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认 default，可在子类中被重新定义，也可被重新赋值。

## 深拷贝和浅拷贝区别了解
* 浅拷贝：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。
* 深拷贝 ：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。

## object
### == 和 equals()的区别
* 对于基本数据类型，==比较的是值
* 对于引用数据类型，==比较的是对象的内存地址
> Java是值得传递
equals()不能用来判断基本数据类型的变量,只能用来判断两个对象是否相等.
* 类没重写equals()方法:通过equals()比较该类的两个对象时,等价于==,比较的是对象的内存地址。
* 类重写equals()方法:一般我们重写equals()方法用来比较对象的属性是否相等,相等返回true
> String类的重写equals()方法
```java
public boolean equals(Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceof String) {
        String anotherString = (String)anObject;
        int n = value.length;
        if (n == anotherString.value.length) {
            char v1[] = value;
            char v2[] = anotherString.value;
            int i = 0;
            while (n-- != 0) {
                if (v1[i] != v2[i])
                    return false;
                i"+""+";
            }
            return true;
        }
    }
    return false;
}
```
###  hashCode()
#### hashCode有什么用
* hashCode()用于获取哈希码,确定该对象在哈希表中的索引位置
* hashCode()在判断对象是否在对应容器中的效率比较高,但两个对象的哈希值相等并不代表两个对象相同,因为hashCode()会产生哈希碰撞问题
> 总结下来就是 ：<br>
如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。<br>
如果两个对象的hashCode 值相等并且equals()方法也返回 true，我们才认为这两个对象相等。<br>
如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。

> 思考 :<br>
重写了equals方法，不重写hashCode方法时: <br>
可能会出现equals方法返回为true，而hashCode方法却返回false。这样的一个后果会导致在hashmap、hashSet等类中存储多个一模一样的对象，这与java的思想不符（因为：hashmap只能有唯一的key，hashSet只能有唯一的对象）

# String
## String, StringBuffer, StringBuilder的区别
* String是不可变的
*StringBuffer,StringBuilder继承AbstractStringBuilder,没有被private和final修饰,
也是使用字符数组来存值,并且提供了很多操作字符串的方法.
* String是不可变的所以是线程安全的,每次修改都要创建新的String对象
* StringBuffer是在原对象上进行操作,方法中加了同步锁,所以是线程安全的
* StringBuilder没有加同步锁,所以是线程安全的,性能比StringBuffer高10%-15%,但要冒着多线程不安全的风险

> final: <br>
final修饰基本数据类型值不能被改变;<br>
修改引用类型,不能再指向其他对象;<br>
修饰类,该类不能被继承;<br>
修饰方法,该方法不能被重写;

# final，finally，finalize
1. final关键字修饰基本数据类型值不可改变<br>
修饰引用类型，不能再指向其他对象；<br>
修饰类该类不能被继承；<br>
修饰方法该发放不能被重写；<br>

2. finally是异常处理语句解构的一部分，不管是否有异常，最终都要被执行<br>

3. finalize是实例被垃圾回收期回收的时候触发的操作<br>

## String为什么是不可变的
* 保存字符串的字符数组是被final修饰且私有化的,并且String类没有提供修改字符数组的方法
* String类被final修饰,不能被继承,避免子类破坏String的不可变


## 字符串拼接用“"+"” 还是 StringBuilder?
String用""+""拼接字符串,通过字节码发现,实际是调用了StringBuilder的appen()方法,
但如果在循环中使用"+"拼接,StringBuilder不会被复用,会重复创建StringBuilder对象影响代码性能,建议直接StringBuilder的append()方法;

## String的equals()和Object的equals()的区别
* String的equals()是被重写过的,是对两个对象值的比较;
* Object的equals()是对对象内存地址的比较

## 字符串常量池
字符串常量池主要JVM为了提高性能减少内存消耗对字符串专门提供的一块内存区域,为了避免字符串的重复创建
```java
// 在堆中创建字符串对象”ab“
// 将字符串对象”ab“的引用保存在字符串常量池中
String aa = "ab";
// 直接返回字符串常量池中字符串对象”ab“的引用
String bb = "ab";
System.out.println(aa==bb);// true
```

## inner()方法的作用
String.inner() 是native(本地)方法,将指定对象的引用保存在字符串常量池中,分为两种情况:
1. 常量池中存在该引用,直接返回对应的引用
2. 如果不存在该引用,那么创建指向该字符串的引用并返回

```java
// 在堆中创建字符串对象”Java“
// 将字符串对象”Java“的引用保存在字符串常量池中
String s1 = "Java";
// 直接返回字符串常量池中字符串对象”Java“对应的引用
String s2 = s1.intern();
// 会在堆中在单独创建一个字符串对象
String s3 = new String("Java");
// 直接返回字符串常量池中字符串对象”Java“对应的引用
String s4 = s3.intern();
// s1 和 s2 指向的是堆中的同一个对象
System.out.println(s1 == s2); // true
// s3 和 s4 指向的是堆中不同的对象
System.out.println(s3 == s4); // false
// s1 和 s4 指向的是堆中的同一个对象
System.out.println(s1 == s4); //true
```
## String 类型的变量和常量做“+”运算时发生了什么？
不加final的情况下:
```java
String str1 = "str";
String str2 = "ing";
String str3 = "str" + "ing";
String str4 = str1 + str2;
String str5 = "string";
System.out.println(str3 == str4);//false
System.out.println(str3 == str5);//true
System.out.println(str4 == str5);//false
```
> 对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。并且，字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池，这个得益于编译器的优化。

字符串使用final修饰,可以让编译器当作常量处理:
```java
final String str1 = "str";
final String str2 = "ing";
// 下面两个表达式其实是等价的
String c = "str" + "ing";// 常量池中的对象
String d = str1 + str2; // 常量池中的对象
System.out.println(c == d);// true
```
