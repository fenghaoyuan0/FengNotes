# 基础（下）
## 系列化与反序列化
序列化：将数据结构或者对象转换成二进制字节流的过程<br>
反序列化：将序列化过程中产生的二进制字节流转换成数据结构或者对象的过程

**应用场景：**
* 网络传输对象之气那要进行序列化，再接收序列化对象后要进行反序列化；
* 将对象储存在数据库中（redis），在从数据库中读取对象后要进行反序列化；
* 将对象储存在内存中，把对象从缓存数据库中读取出来要进行发序列化；
* 将对象存储到文件之前，将对象从文件中读出后要进行反序列化。
> 综上所述：在进行网络传输对象和将对象存储在数据库，文件系统，内存中时要进行序列化操作，读取时要进行反序列化操作。

序列化操作属于OSI七层协议模型中的**表示层**，属于TCP/IP四层模型中的**应用层**

**常见的序列化协议：** Hessian、Kryo、Protobuf、ProtoStuff；<br>
像 JSON 和 XML 这种属于文本类序列化方式。虽然可读性比较好，但是性能较差，一般不会选择。

**不使用JDK自带的序列化协议的原因：**不支持跨语言调用；性能差；存在安全问题。

**有些字段不想进行序列化怎么办？**
transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；
当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。

关于 transient 还有几点注意：
* transient 只能修饰变量，不能修饰类和方法。
* transient 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 int 类型，那么反序列后结果就是0。
* static 变量因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化。
